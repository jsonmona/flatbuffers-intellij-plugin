{
  parserClass="io.github.stefansjs.flatbuffersplugin.parser.FlatbuffersParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Flatbuffers"
  psiImplClassSuffix="Impl"
  psiPackage="io.github.stefansjs.flatbuffersplugin.psi"
  psiImplPackage="io.github.stefansjs.flatbuffersplugin.psi.impl"

  elementTypeHolderClass="io.github.stefansjs.flatbuffersplugin.psi.FlatbuffersTypes"
  elementTypeClass="io.github.stefansjs.flatbuffersplugin.psi.FlatbuffersElementType"
  tokenTypeClass="io.github.stefansjs.flatbuffersplugin.psi.FlatbuffersTokenType"

  psiImplUtilClass="io.github.stefansjs.flatbuffersplugin.psi.impl.FlatbuffersPsiImplUtilKt"

  tokens=[
      STRING_LITERAL='regexp:".*?"'
      IDENTIFIER='regexp:[a-zA-Z_][a-zA-Z0-9_]*'

      DEC_INTEGER = 'regexp:[-+]?\d+'
      HEX_INTEGER = 'regexp:[-+]?0[xX][0-9a-fA-F]+'

      DEC_FLOAT = 'regexp:[-+]?(([.]\d+)|(\d+[.]\d*)|(\d+))([eE][-+]?\d+)?'
      HEX_FLOAT = 'regexp:[-+]?0[xX](([.][0-9a-fA-F]+)|([0-9a-fA-F]+[.][0-9a-fA-F]*)|([0-9a-fA-F]+))([pP][-+]?\d+)'
      SPECIAL_FLOAT = 'regexp:[-+]?(nan|inf|infinity)'

      DOCLINE = 'regexp:///[^\r\n]*'
      COMMENT = 'regexp://[^\r\n/]*'
      BLOCK_COMMENT = 'regexp:/\*(.|\n)*\*/'
  ]
}

schema ::= incl* declaration*

incl ::= INCLUDE string_constant SEMICOLON

declaration ::= namespace_decl
              | type_decl
              | enum_decl
              | union_decl
              | root_decl
              | file_extension_decl
              | file_identifier_decl
              | attribute_decl
              | rpc_decl
              | object
              {recoverWhile=decl_recover}
private decl_recover ::= !(NAMESPACE |
                           TABLE |
                           STRUCT |
                           ENUM |
                           UNION |
                           ROOT_TYPE |
                           FILE_EXTENSION |
                           FILE_IDENTIFIER |
                           ATTRIBUTE |
                           RPC_SERVICE)

namespace_decl ::= NAMESPACE ident ( DOT ident )* SEMICOLON
                   {pin=2}

attribute_decl ::= ATTRIBUTE ( ident | string_constant ) SEMICOLON
                   {pin=2}

type_decl ::= ( TABLE | STRUCT ) ident metadata? LCURLY field_decl* RCURLY
              {pin=2
               mixin="io.github.stefansjs.flatbuffersplugin.psi.ref.FlatbuffersNamedElementImpl"
               implements="io.github.stefansjs.flatbuffersplugin.psi.ref.FlatbuffersNamedElement"
               methods=[getName setName getNameIdentifier]}

enum_decl ::= documentation? ENUM ident ( COLON primitive )? metadata? LCURLY commasep_enumval_decl? RCURLY
              {mixin="io.github.stefansjs.flatbuffersplugin.psi.ref.FlatbuffersNamedElementImpl"
               implements="io.github.stefansjs.flatbuffersplugin.psi.ref.FlatbuffersNamedElement"
               methods=[getName setName getNameIdentifier]
               pin=ident
               }

private commasep_enumval_decl ::= enumval_decl ( COMMA enumval_decl )* COMMA?

union_decl ::= documentation? union ident LCURLY commasep_unionval_decl? RCURLY
              {mixin="io.github.stefansjs.flatbuffersplugin.psi.ref.FlatbuffersNamedElementImpl"
               implements="io.github.stefansjs.flatbuffersplugin.psi.ref.FlatbuffersNamedElement"
               methods=[getName setName getNameIdentifier]
               pin=ident
               }

private commasep_unionval_decl ::= unionval_decl ( COMMA unionval_decl )* COMMA?

root_decl ::= ROOT_TYPE declared_type SEMICOLON
              {pin=declared_type}

field_decl ::= ident COLON field_type ( EQUALS (scalar|ident) )? metadata? SEMICOLON
               {pin=1}

rpc_decl ::= RPC_SERVICE ident LCURLY rpc_method+ RCURLY
             {pin=ident}

rpc_method ::= ident LPAREN ident RPAREN COLON ident metadata? SEMICOLON

field_type ::= primitive
             | array_type
             | declared_type

// make primitive private so that we don't start nesting keywords
// in PSI elements. They're still just keywords
primitive ::= int_type | float_type | string
private int_type ::= bool
                   | byte
                   | ubyte
                   | short
                   | ushort
                   | int
                   | uint
                   | long
                   | ulong
                   | int8
                   | uint8
                   | int16
                   | uint16
                   | int32
                   | uint32
                   | int64
                   | uint64
private float_type ::= float
                     | double
                     | float32
                     | float64

array_type ::= LBRACK (primitive | declared_type) RBRACK
declared_type ::= ident (DOT ident)*
                  {mixin="io.github.stefansjs.flatbuffersplugin.psi.impl.FlatbuffersDeclaredTypeMixin"
                  }

enumval_decl ::= ident ( EQUALS integer_constant )?

unionval_decl ::= ident ( COLON ident )?

metadata ::= LPAREN metadata_value ( COMMA metadata_value )* RPAREN

private metadata_value ::= ident ( COLON single_value )?

scalar ::= integer_constant | float_constant | boolean_constant

object ::= object_value ( COMMA object_value )*

private object_value ::= ident COLON value

single_value ::= scalar | string_constant

value ::= single_value | object | LBRACK commasep_value RBRACK

private commasep_value ::= ( value ( COMMA value )* )?

file_extension_decl ::= FILE_EXTENSION string_constant SEMICOLON

file_identifier_decl ::= FILE_IDENTIFIER string_constant SEMICOLON

documentation ::= DOCLINE*

string_constant ::= STRING_LITERAL

ident ::= IDENTIFIER

integer_constant ::= dec_integer_constant | hex_integer_constant

float_constant ::= decimal_float_constant | hexadecimal_float_constant | special_float_constant

boolean_constant ::= (TRUE|FALSE) | (integer_constant QUESTION_MARK TRUE COLON FALSE)

dec_integer_constant ::= DEC_INTEGER

hex_integer_constant ::= HEX_INTEGER

decimal_float_constant ::= DEC_FLOAT

hexadecimal_float_constant ::= HEX_FLOAT

special_float_constant ::= SPECIAL_FLOAT
