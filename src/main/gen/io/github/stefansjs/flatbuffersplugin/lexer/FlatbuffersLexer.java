/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.stefansjs.flatbuffersplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.stefansjs.flatbuffersplugin.psi.FlatbuffersTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FlatbuffersLexer.flex</tt>
 */
public class FlatbuffersLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\0\1\5\5\0\1\63\1\64\1\26\1\10\1\55\1\10\1"+
    "\14\1\25\1\11\1\50\1\53\1\52\1\54\1\7\1\51\1\7\1\47\1\7\1\56\1\60\1\0\1\57"+
    "\1\0\1\67\1\0\4\13\1\15\1\13\11\6\1\16\7\6\1\12\2\6\1\65\1\0\1\66\1\0\1\42"+
    "\1\0\1\20\1\40\1\27\1\32\1\33\1\22\1\46\1\45\1\21\2\6\1\30\1\34\1\17\1\41"+
    "\1\36\1\6\1\37\1\35\1\23\1\31\1\43\1\6\1\44\1\24\1\6\1\61\1\0\1\62\7\0\1\1"+
    "\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\1\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\4"+
    "\1\5\5\3\1\1\7\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\0"+
    "\1\21\1\22\5\0\10\3\1\23\1\0\16\3\1\22"+
    "\3\0\1\24\1\0\1\25\2\3\1\25\1\26\6\3"+
    "\1\0\16\3\2\25\2\0\3\3\1\27\10\3\1\30"+
    "\1\31\1\32\1\3\1\33\4\3\1\34\5\3\1\35"+
    "\1\36\1\0\1\37\1\0\3\3\1\40\1\41\1\42"+
    "\1\3\1\43\1\3\1\44\1\45\1\46\1\47\3\3"+
    "\1\50\1\3\1\51\3\3\1\52\2\3\1\0\10\3"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\2\3"+
    "\1\0\3\3\1\62\2\3\1\63\1\64\2\3\1\0"+
    "\6\3\1\65\1\66\3\3\1\67\5\3\1\70\5\3"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\250\0\250\0\u04d0\0\u0508\0\u01c0\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\340"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\70\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\340\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\340\0\u07e0\0\340\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\340\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\340\0\340\0\u1730\0\u1768\0\u1768\0\u17a0\0\u17d8\0\u1810"+
    "\0\340\0\340\0\340\0\u1848\0\340\0\u1880\0\u18b8\0\340"+
    "\0\340\0\340\0\u18f0\0\u1928\0\u1960\0\340\0\u1998\0\340"+
    "\0\u19d0\0\u1a08\0\u1a40\0\340\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\340"+
    "\0\340\0\340\0\340\0\340\0\340\0\340\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\340\0\u1e30\0\u1e68\0\340"+
    "\0\340\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\340\0\340\0\u2098\0\u20d0\0\u2108\0\340"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\340\0\u2258\0\u2290"+
    "\0\u22c8\0\u2300\0\u2338\0\340\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\2\5"+
    "\1\11\2\5\1\12\1\13\1\14\1\15\1\16\1\5"+
    "\1\17\1\2\1\5\1\20\1\21\1\22\1\23\1\5"+
    "\1\24\1\5\1\25\1\26\6\5\6\6\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\71\0\4\3\63\0\1\42\3\0\1\42\1\43"+
    "\62\42\6\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\26\5\22\0\1\6\1\0\1\6\2\0\1\44\1\45"+
    "\15\0\1\45\13\0\6\6\22\0\1\6\1\0\1\10"+
    "\2\0\1\46\2\0\1\47\1\0\1\50\25\0\6\6"+
    "\22\0\1\6\1\0\1\6\1\51\1\0\1\44\1\45"+
    "\15\0\1\45\10\0\1\51\2\0\6\6\22\0\1\44"+
    "\1\0\1\44\35\0\6\44\21\0\2\5\1\0\3\5"+
    "\1\0\3\5\1\52\4\5\2\0\26\5\21\0\2\5"+
    "\1\0\3\5\1\0\6\5\1\53\1\5\2\0\26\5"+
    "\21\0\2\5\1\0\3\5\1\0\2\5\1\54\5\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\3\5"+
    "\1\55\1\56\3\5\2\0\1\5\1\57\24\5\21\0"+
    "\2\5\1\0\3\5\1\0\3\5\1\60\4\5\2\0"+
    "\10\5\1\61\15\5\40\0\1\62\1\63\47\0\2\5"+
    "\1\0\3\5\1\0\10\5\2\0\12\5\1\64\13\5"+
    "\21\0\2\5\1\0\3\5\1\0\2\5\1\65\1\5"+
    "\1\66\3\5\2\0\1\5\1\67\4\5\1\70\2\5"+
    "\1\71\14\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\12\5\1\72\13\5\21\0\2\5\1\0\3\5"+
    "\1\0\2\5\1\73\5\5\2\0\26\5\21\0\2\5"+
    "\1\0\3\5\1\0\6\5\1\74\1\5\2\0\16\5"+
    "\1\75\7\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\7\5\1\76\2\5\1\77\13\5\21\0\2\5"+
    "\1\0\3\5\1\0\7\5\1\100\2\0\12\5\1\101"+
    "\13\5\22\0\1\44\1\0\1\44\3\0\1\45\15\0"+
    "\1\45\13\0\6\44\22\0\1\102\1\103\1\102\35\0"+
    "\6\102\33\0\1\104\66\0\1\105\57\0\1\106\1\0"+
    "\1\106\1\0\1\106\1\107\1\106\2\0\1\106\1\0"+
    "\1\106\4\0\1\106\2\0\2\106\4\0\1\106\6\0"+
    "\6\106\21\0\2\5\1\0\3\5\1\0\2\5\1\110"+
    "\5\5\2\0\5\5\1\111\20\5\21\0\2\5\1\0"+
    "\3\5\1\0\6\5\1\112\1\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\5\5\1\113\1\114\1\5"+
    "\2\0\1\115\25\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\1\5\1\116\24\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\1\5\1\117\24\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\12\5\1\120"+
    "\13\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\11\5\1\121\14\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\2\5\1\122\23\5\13\0\2\62\2\0"+
    "\64\62\1\63\1\0\1\63\1\0\22\63\1\123\41\63"+
    "\6\0\2\5\1\0\3\5\1\0\2\5\1\124\5\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\4\5"+
    "\1\125\3\5\2\0\26\5\21\0\2\5\1\0\3\5"+
    "\1\0\2\5\1\126\5\5\2\0\26\5\21\0\2\5"+
    "\1\0\3\5\1\0\10\5\2\0\12\5\1\127\13\5"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\16\5"+
    "\1\130\7\5\21\0\2\5\1\0\3\5\1\0\7\5"+
    "\1\131\2\0\26\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\2\5\1\132\23\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\2\5\1\133\23\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\10\5\1\134"+
    "\15\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\12\5\1\135\13\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\1\136\25\5\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\12\5\1\137\13\5\21\0\2\5"+
    "\1\0\3\5\1\0\6\5\1\140\1\5\2\0\26\5"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\12\5"+
    "\1\141\13\5\22\0\1\102\1\0\1\102\35\0\6\102"+
    "\32\0\1\142\72\0\1\143\54\0\1\106\1\0\1\106"+
    "\1\0\1\106\1\144\1\106\1\145\1\0\1\106\1\0"+
    "\1\106\4\0\1\106\2\0\2\106\2\0\1\145\1\0"+
    "\1\106\6\0\6\106\22\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\4\0"+
    "\1\144\2\0\2\144\4\0\1\144\6\0\6\144\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\4\5\1\146"+
    "\21\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\10\5\1\147\15\5\21\0\2\5\1\0\3\5\1\0"+
    "\4\5\1\150\3\5\2\0\26\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\20\5\1\151\1\152\1\153"+
    "\1\154\2\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\1\5\1\155\24\5\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\6\5\1\156\17\5\21\0\2\5"+
    "\1\0\3\5\1\0\10\5\2\0\4\5\1\157\21\5"+
    "\21\0\2\5\1\0\3\5\1\0\3\5\1\160\4\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\1\5\1\161\24\5\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\4\5\1\162\21\5\13\0\1\63"+
    "\1\0\1\63\1\0\21\63\1\163\1\123\41\63\6\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\17\5\1\164"+
    "\6\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\12\5\1\165\13\5\21\0\2\5\1\0\3\5\1\0"+
    "\6\5\1\166\1\5\2\0\26\5\21\0\2\5\1\0"+
    "\3\5\1\0\2\5\1\167\5\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\12\5\1\170"+
    "\13\5\21\0\2\5\1\0\3\5\1\0\6\5\1\171"+
    "\1\5\2\0\26\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\11\5\1\172\14\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\5\5\1\173\20\5\21\0"+
    "\2\5\1\0\3\5\1\0\4\5\1\174\3\5\2\0"+
    "\2\5\1\175\23\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\10\5\1\176\15\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\13\5\1\177\12\5\21\0"+
    "\2\5\1\0\3\5\1\0\6\5\1\200\1\5\2\0"+
    "\26\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\4\5\1\201\21\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\1\5\1\202\24\5\34\0\1\203\55\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\145"+
    "\1\0\1\144\1\0\1\144\4\0\1\144\2\0\2\144"+
    "\2\0\1\145\1\0\1\144\6\0\6\144\22\0\1\204"+
    "\1\205\1\204\35\0\6\204\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\6\5\1\206\17\5\21\0\2\5"+
    "\1\0\3\5\1\0\4\5\1\207\3\5\2\0\26\5"+
    "\21\0\2\5\1\0\3\5\1\0\2\5\1\210\5\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\22\5\1\211\3\5\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\25\5\1\212\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\24\5\1\213\1\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\2\5\1\214"+
    "\23\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\4\5\1\215\21\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\13\5\1\216\12\5\21\0\2\5\1\0"+
    "\3\5\1\0\6\5\1\217\1\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\4\5\1\220"+
    "\21\5\21\0\2\5\1\0\3\5\1\0\2\5\1\221"+
    "\5\5\2\0\26\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\20\5\1\222\1\223\1\224\1\225\2\5"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\17\5"+
    "\1\226\6\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\10\5\1\227\15\5\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\4\5\1\230\21\5\21\0\2\5"+
    "\1\0\3\5\1\0\10\5\2\0\1\5\1\231\24\5"+
    "\21\0\2\5\1\0\3\5\1\0\2\5\1\232\5\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\1\233\25\5\21\0\2\5\1\0\3\5\1\0"+
    "\6\5\1\234\1\5\2\0\26\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\6\5\1\235\17\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\13\5\1\236"+
    "\12\5\32\0\1\237\57\0\1\204\1\0\1\204\35\0"+
    "\6\204\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\7\5\1\240\16\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\11\5\1\241\14\5\21\0\2\5\1\0"+
    "\3\5\1\0\4\5\1\242\3\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\3\5\1\243"+
    "\22\5\21\0\2\5\1\0\3\5\1\0\4\5\1\244"+
    "\3\5\2\0\4\5\1\245\21\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\22\5\1\246\1\247\2\5"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\22\5"+
    "\1\250\3\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\25\5\1\251\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\24\5\1\252\1\5\21\0\2\5\1\0"+
    "\3\5\1\0\6\5\1\253\1\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\4\5\1\254"+
    "\21\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\17\5\1\255\6\5\21\0\2\5\1\0\3\5\1\0"+
    "\6\5\1\256\1\5\2\0\26\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\4\5\1\257\21\5\21\0"+
    "\2\5\1\0\3\5\1\0\6\5\1\260\1\5\2\0"+
    "\26\5\34\0\1\261\54\0\2\5\1\0\3\5\1\0"+
    "\3\5\1\262\4\5\2\0\26\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\2\5\1\263\23\5\21\0"+
    "\2\5\1\0\3\5\1\0\6\5\1\264\1\5\2\0"+
    "\26\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\4\5\1\265\21\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\3\5\1\266\22\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\15\5\1\267\10\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\25\5\1\270"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\24\5"+
    "\1\271\1\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\10\5\1\272\15\5\21\0\2\5\1\0\3\5"+
    "\1\0\7\5\1\273\2\0\26\5\36\0\1\274\52\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\1\275\25\5"+
    "\21\0\2\5\1\0\3\5\1\0\6\5\1\276\1\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\7\5"+
    "\1\110\2\0\26\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\4\5\1\277\21\5\21\0\2\5\1\0"+
    "\3\5\1\0\6\5\1\300\1\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\14\5\1\301"+
    "\11\5\21\0\2\5\1\0\3\5\1\0\10\5\2\0"+
    "\7\5\1\302\16\5\37\0\1\142\51\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\4\5\1\303\21\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\4\5\1\304"+
    "\21\5\21\0\2\5\1\0\3\5\1\0\2\5\1\305"+
    "\5\5\2\0\26\5\21\0\2\5\1\0\3\5\1\0"+
    "\10\5\2\0\4\5\1\306\21\5\21\0\2\5\1\0"+
    "\3\5\1\0\4\5\1\307\3\5\2\0\26\5\21\0"+
    "\2\5\1\0\3\5\1\0\10\5\2\0\4\5\1\310"+
    "\21\5\21\0\2\5\1\0\3\5\1\0\6\5\1\311"+
    "\1\5\2\0\26\5\21\0\2\5\1\0\3\5\1\0"+
    "\2\5\1\312\5\5\2\0\26\5\21\0\2\5\1\0"+
    "\3\5\1\0\10\5\2\0\1\313\25\5\21\0\2\5"+
    "\1\0\3\5\1\0\4\5\1\314\3\5\2\0\26\5"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\6\5"+
    "\1\315\17\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\4\5\1\316\21\5\21\0\2\5\1\0\3\5"+
    "\1\0\5\5\1\317\2\5\2\0\26\5\21\0\2\5"+
    "\1\0\3\5\1\0\4\5\1\320\3\5\2\0\26\5"+
    "\21\0\2\5\1\0\3\5\1\0\4\5\1\321\3\5"+
    "\2\0\26\5\21\0\2\5\1\0\3\5\1\0\10\5"+
    "\2\0\12\5\1\322\13\5\21\0\2\5\1\0\3\5"+
    "\1\0\10\5\2\0\4\5\1\323\21\5\21\0\2\5"+
    "\1\0\3\5\1\0\2\5\1\324\5\5\2\0\26\5"+
    "\21\0\2\5\1\0\3\5\1\0\10\5\2\0\10\5"+
    "\1\325\15\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\13\11\1\0\2\1\5\0\11\1"+
    "\1\0\17\1\3\0\1\1\1\0\13\1\1\0\16\1"+
    "\1\11\1\1\2\0\35\1\1\0\1\1\1\0\31\1"+
    "\1\0\21\1\1\0\12\1\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public FlatbuffersLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FlatbuffersLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 61: break;
          case 4: 
            { return DEC_INTEGER;
            } 
            // fall through
          case 62: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 63: break;
          case 6: 
            { return COMMA;
            } 
            // fall through
          case 64: break;
          case 7: 
            { return COLON;
            } 
            // fall through
          case 65: break;
          case 8: 
            { return EQUALS;
            } 
            // fall through
          case 66: break;
          case 9: 
            { return SEMICOLON;
            } 
            // fall through
          case 67: break;
          case 10: 
            { return LCURLY;
            } 
            // fall through
          case 68: break;
          case 11: 
            { return RCURLY;
            } 
            // fall through
          case 69: break;
          case 12: 
            { return LPAREN;
            } 
            // fall through
          case 70: break;
          case 13: 
            { return RPAREN;
            } 
            // fall through
          case 71: break;
          case 14: 
            { return LBRACK;
            } 
            // fall through
          case 72: break;
          case 15: 
            { return RBRACK;
            } 
            // fall through
          case 73: break;
          case 16: 
            { return QUESTION_MARK;
            } 
            // fall through
          case 74: break;
          case 17: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 75: break;
          case 18: 
            { return DEC_FLOAT;
            } 
            // fall through
          case 76: break;
          case 19: 
            { return COMMENT;
            } 
            // fall through
          case 77: break;
          case 20: 
            { return HEX_INTEGER;
            } 
            // fall through
          case 78: break;
          case 21: 
            { return SPECIAL_FLOAT;
            } 
            // fall through
          case 79: break;
          case 22: 
            { return INT;
            } 
            // fall through
          case 80: break;
          case 23: 
            { return INT8;
            } 
            // fall through
          case 81: break;
          case 24: 
            { return TRUE;
            } 
            // fall through
          case 82: break;
          case 25: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 83: break;
          case 26: 
            { return LONG;
            } 
            // fall through
          case 84: break;
          case 27: 
            { return UINT;
            } 
            // fall through
          case 85: break;
          case 28: 
            { return ENUM;
            } 
            // fall through
          case 86: break;
          case 29: 
            { return BYTE;
            } 
            // fall through
          case 87: break;
          case 30: 
            { return BOOL;
            } 
            // fall through
          case 88: break;
          case 31: 
            { return HEX_FLOAT;
            } 
            // fall through
          case 89: break;
          case 32: 
            { return INT16;
            } 
            // fall through
          case 90: break;
          case 33: 
            { return INT64;
            } 
            // fall through
          case 91: break;
          case 34: 
            { return INT32;
            } 
            // fall through
          case 92: break;
          case 35: 
            { return FALSE;
            } 
            // fall through
          case 93: break;
          case 36: 
            { return FLOAT;
            } 
            // fall through
          case 94: break;
          case 37: 
            { return TABLE;
            } 
            // fall through
          case 95: break;
          case 38: 
            { return UNION;
            } 
            // fall through
          case 96: break;
          case 39: 
            { return UINT8;
            } 
            // fall through
          case 97: break;
          case 40: 
            { return ULONG;
            } 
            // fall through
          case 98: break;
          case 41: 
            { return UBYTE;
            } 
            // fall through
          case 99: break;
          case 42: 
            { return SHORT;
            } 
            // fall through
          case 100: break;
          case 43: 
            { return UINT16;
            } 
            // fall through
          case 101: break;
          case 44: 
            { return UINT64;
            } 
            // fall through
          case 102: break;
          case 45: 
            { return UINT32;
            } 
            // fall through
          case 103: break;
          case 46: 
            { return USHORT;
            } 
            // fall through
          case 104: break;
          case 47: 
            { return DOUBLE;
            } 
            // fall through
          case 105: break;
          case 48: 
            { return STRING;
            } 
            // fall through
          case 106: break;
          case 49: 
            { return STRUCT;
            } 
            // fall through
          case 107: break;
          case 50: 
            { return INCLUDE;
            } 
            // fall through
          case 108: break;
          case 51: 
            { return FLOAT64;
            } 
            // fall through
          case 109: break;
          case 52: 
            { return FLOAT32;
            } 
            // fall through
          case 110: break;
          case 53: 
            { return NAMESPACE;
            } 
            // fall through
          case 111: break;
          case 54: 
            { return ATTRIBUTE;
            } 
            // fall through
          case 112: break;
          case 55: 
            { return ROOT_TYPE;
            } 
            // fall through
          case 113: break;
          case 56: 
            { return RPC_SERVICE;
            } 
            // fall through
          case 114: break;
          case 57: 
            { return FILE_EXTENSION;
            } 
            // fall through
          case 115: break;
          case 58: 
            { return FILE_IDENTIFIER;
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
