// example IDL file

front matter before the first includes causes a special type of failure;

include "some_schema.fbs";
include bad_include;
include "another_schema.fbs";

namespace MyGame;

include "in_the_wrong_place.fbs";

attribute "priority";

// regular one-line comment
enum NoValues {}
enum Color : byte { Red = 1, Green, Blue }

/// documentation comment
union NoTypes {}
union Any { Monster, Weapon, Pickup }

/* c-style block comment */
struct EmptyStruct {}
struct Vec3 {
  x:float;
  y:float;
  z:float;
}

table EmptyTable {}
table Monster {
  pos:Vec3;
  mana:short = 150;
  hp:short = 100;
  name:string;
  friendly:bool = false (deprecated, priority: 1);
  inventory:[ubyte];
  color:Color = Blue;
  test:Any;
}

multiple identifiers with a semicolon;


/* This test data comes from a github bugreport on field names using flatbuffers reserved keywords
 * https://github.com/stefansjs/flatbuffers-intellij-plugin/issues/7
 */
table Typeful {
	id           : uint64	;
	int          : int		;
	int8         : int8		;
	int16        : int16	;
	int32        : int32	;
	int64        : int64	;
	uint         : uint		;
	uint8        : uint8	;
	uint16       : uint16	;
	uint32       : uint32	;
	uint64       : uint64	;
	bool         : bool		;
	string       : string	;
	stringvector : [string]	;
	byte         : byte		;
	ubyte        : ubyte	;
	bytevector   : [byte]	;
	ubytevector  : [ubyte]	;
	float32      : float32	;
	float64      : float64	;
	float        : float	;
	double       : double	;
}



tab BadKeyword {
  one:int = 1;
}

table CascadeFailures
{
  //Arrays without pins can consume too many tokens and break the rest of the table.
  //If the parser is implemented correctly, one bad element shouldn't cause the rest of the elements to go unrecognized.
  openArray:[Faux;
  goodElement:[Color];
  emptyArray:[];
  moreGoodElements[Typeful];
  badArrayClassName:[a.];
  moreBetter:Monster;
}


root_type Monster;
